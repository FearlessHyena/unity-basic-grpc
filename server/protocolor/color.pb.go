// Code generated by protoc-gen-go. DO NOT EDIT.
// source: color.proto

package protocolor

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The current color of the requester
type CurrentColor struct {
	Color                string   `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrentColor) Reset()         { *m = CurrentColor{} }
func (m *CurrentColor) String() string { return proto.CompactTextString(m) }
func (*CurrentColor) ProtoMessage()    {}
func (*CurrentColor) Descriptor() ([]byte, []int) {
	return fileDescriptor_83c7eb30498dece0, []int{0}
}

func (m *CurrentColor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrentColor.Unmarshal(m, b)
}
func (m *CurrentColor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrentColor.Marshal(b, m, deterministic)
}
func (m *CurrentColor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentColor.Merge(m, src)
}
func (m *CurrentColor) XXX_Size() int {
	return xxx_messageInfo_CurrentColor.Size(m)
}
func (m *CurrentColor) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentColor.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentColor proto.InternalMessageInfo

func (m *CurrentColor) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

// The new color that was generated
type NewColor struct {
	Color                string   `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewColor) Reset()         { *m = NewColor{} }
func (m *NewColor) String() string { return proto.CompactTextString(m) }
func (*NewColor) ProtoMessage()    {}
func (*NewColor) Descriptor() ([]byte, []int) {
	return fileDescriptor_83c7eb30498dece0, []int{1}
}

func (m *NewColor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewColor.Unmarshal(m, b)
}
func (m *NewColor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewColor.Marshal(b, m, deterministic)
}
func (m *NewColor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewColor.Merge(m, src)
}
func (m *NewColor) XXX_Size() int {
	return xxx_messageInfo_NewColor.Size(m)
}
func (m *NewColor) XXX_DiscardUnknown() {
	xxx_messageInfo_NewColor.DiscardUnknown(m)
}

var xxx_messageInfo_NewColor proto.InternalMessageInfo

func (m *NewColor) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func init() {
	proto.RegisterType((*CurrentColor)(nil), "protocolor.CurrentColor")
	proto.RegisterType((*NewColor)(nil), "protocolor.NewColor")
}

func init() { proto.RegisterFile("color.proto", fileDescriptor_83c7eb30498dece0) }

var fileDescriptor_83c7eb30498dece0 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0xcf, 0xc9,
	0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0x53, 0x60, 0x11, 0x25, 0x15, 0x2e,
	0x1e, 0xe7, 0xd2, 0xa2, 0xa2, 0xd4, 0xbc, 0x12, 0x67, 0x10, 0x5f, 0x48, 0x84, 0x8b, 0x15, 0x2c,
	0x21, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe1, 0x28, 0x29, 0x70, 0x71, 0xf8, 0xa5, 0x96,
	0xe3, 0x51, 0x61, 0x14, 0xc2, 0xc5, 0x07, 0x96, 0x76, 0x4f, 0xcd, 0x4b, 0x2d, 0x4a, 0x2c, 0xc9,
	0x2f, 0x12, 0x72, 0xe2, 0xe2, 0x73, 0x4f, 0x2d, 0x09, 0x4a, 0xcc, 0x4b, 0xc9, 0xcf, 0x85, 0xe8,
	0x94, 0xd0, 0x43, 0x58, 0xac, 0x87, 0x6c, 0xab, 0x94, 0x08, 0xb2, 0x0c, 0xcc, 0x26, 0x25, 0x86,
	0x24, 0x36, 0xb0, 0xb0, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xed, 0xbb, 0xd7, 0x85, 0xbf, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ColorGeneratorClient is the client API for ColorGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ColorGeneratorClient interface {
	//Generates a random color that is different from the current one
	GetRandomColor(ctx context.Context, in *CurrentColor, opts ...grpc.CallOption) (*NewColor, error)
}

type colorGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewColorGeneratorClient(cc *grpc.ClientConn) ColorGeneratorClient {
	return &colorGeneratorClient{cc}
}

func (c *colorGeneratorClient) GetRandomColor(ctx context.Context, in *CurrentColor, opts ...grpc.CallOption) (*NewColor, error) {
	out := new(NewColor)
	err := c.cc.Invoke(ctx, "/protocolor.ColorGenerator/GetRandomColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColorGeneratorServer is the server API for ColorGenerator service.
type ColorGeneratorServer interface {
	//Generates a random color that is different from the current one
	GetRandomColor(context.Context, *CurrentColor) (*NewColor, error)
}

// UnimplementedColorGeneratorServer can be embedded to have forward compatible implementations.
type UnimplementedColorGeneratorServer struct {
}

func (*UnimplementedColorGeneratorServer) GetRandomColor(ctx context.Context, req *CurrentColor) (*NewColor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomColor not implemented")
}

func RegisterColorGeneratorServer(s *grpc.Server, srv ColorGeneratorServer) {
	s.RegisterService(&_ColorGenerator_serviceDesc, srv)
}

func _ColorGenerator_GetRandomColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentColor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColorGeneratorServer).GetRandomColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocolor.ColorGenerator/GetRandomColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColorGeneratorServer).GetRandomColor(ctx, req.(*CurrentColor))
	}
	return interceptor(ctx, in, info, handler)
}

var _ColorGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocolor.ColorGenerator",
	HandlerType: (*ColorGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomColor",
			Handler:    _ColorGenerator_GetRandomColor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "color.proto",
}
